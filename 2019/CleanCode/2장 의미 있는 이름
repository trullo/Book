이름을 잘짓는 규칙
첫째, 의도를 분명히 밝혀라
  - 좋은 이름을 지으려면 시간이 걸리지만 좋은 이름으로 절약하는 시간이 훨씬 더 많다.
  - 변수나 함수 그리고 클래스 이름은 다음과 같은 굵직한 질문에 모두 답해야 한다.
    변수(혹은 함수나 클래스)의 존재 이유는? 수행 기능은? 사용 방법은? 
    따로 주석이 필요 하다면 의돌르 분명히 드러내지 못했다는 말이다.
    
    int d; // 경과 시간(단위: 날짜)
    
    이름 d는 아무 의미도 드러나지 않는다. 겨오가 시간이나 날짜라는 느낌이 안 든다.
    측정하려는 값과 단위를 표현하는 이름이 필요하다.
    
    int elapsedTiemInDays;
    int daysSinceCreation;
    int daySinceModification;
    int fileAgeInDays;
    
    의도가 드러나는 이름을 사용하면 코드이해와 변경이 쉬워진다. 다음코드는 무엇을할까?
     
    public List<int[]> getThem(){
      List<int[]> list1 = new ArrayList<int[]>();
      for(int[] x : theList)
        if(x[0] == 4)
          list1.add(x);
      return list1;
    }
    
    코드가 하는 일을 짐작하기 어렵다. 복잡한 문장도 없고 공백과 들여쓰기도 적당하다.
    문제는 코드의 단순성이 아니라 코드의 함축성이다. 다시 말해, 코드맥락이 코드자체에 명시적으로 드러나지 않는다.
    
    지뢰찾기로게임으로 비유시
    게임판에서 각 칸은 단순 배열로 표현한다. 배열에서 0번째 칸은 칸 상태를 뜻한다.
    값 4는 깃발이 꽂힌 상태를 가리킨다. 각 개념에 이름만 붙여도 코드가 상당히 나아진다.
    
    public List<int[]> getFlaggedCells(){
      List<int[]> flaggedCells = new ArrayList<int[]>();
      for (int[] cell : gameBoard)
        if (cell[STATUS_VALUE] == FLAGGED)
          flaggedCells.add(cells);
      return flaggedCells;
    }
    
    한 걸음 더 나아가, int 배열을 사용하는 대신, 칸을 간단한 클래스로 만들어도 되겠다.
    isFlagged라는 좀 더 명시적인 함수를 사용해 FLAGGED라는 상수를 감춰도 좋겠다.
    
    public List<int[]> getFlaggedCells(){
      List<Cell> flaggedCells = new ArrayList<Cell>();
      for (Cell cell : gameBoard)
        if (cell.isFlagged())
          flaggedCells.add(cells);
      return flaggedCells;
    }
   
둘째, 그릇된 정보를 피하라
  - 프로그래머는 코드에 그릇된 단서를 남겨서는 안 된다. 그릇된 단서는 코드 의미를 흐린다.
    나름 널리쓰이는 의미가 있는 단어를 다른 의미로 사용해도 안 된다.
  - 여러 계정을 그룹으로 묶을 때, 실제 List가 아니라면, accountList라 명명하지 않는다.
    프로그래머에게 List라는 단어는 특수한 의미다. 계정을 담는 컨테이너가 실제List가 아니라면 그릇된 정보를 제공하는 셈이다.
  - 유사한 개념은 유샇나 표기법을 사용한다. 이것도 정보다.
  
셋쩨, 의미 있게 구분하라.
  - 컴파일러나 인터프리터만 통과하려는 생각으로 코드르 구현하는 프로그래머는 스스로 문제를 일으킨다
  - 읽는사람이 차이를 알도록 이름을 지어라

넷째, 발음하기 쉬운 이름을 사용하라
  
다섯째, 검색하기 쉬운 이름을 사용하라
  - 이름을 의미있게 지으면 함수가 길어지지만, 원다는 변수를 찾기가 쉬워진다.
    -- before
    for(int j=0;j<34; j++){
      s += (t[j]*4)/5;
    }
    -- after
    int realDaysPerIdealDay = 4;
    const int WORK_DAYS_PER_WEEK = 5;
    int sum = 0;
    for (int j = 0; j < NUMBER_OF_TASKS; j++){
      int realTaskDays = taskEstimate[j] * realDaysPerIdealDay;
      int realTaskWeeks = (realTaskDays / WORK_DAYS_PER_WEEK);
      sum += realTaskWeeks;
    }

여섯째, 인코딩을 피하라
  - 자바 프로그래머는 변수 이름에 타입을 인코딩할 필요가 없다. 객체는 강한타입이며 IDE는 코드를 컴파일하지 안혹도 타입 오류를 감지할 정도로 발전했다.
  - 따라서 이제는 헝가리식 표기법(이름에 타입을 명시)이나 기타 인코딩 방식이 필요가 없고 오히려 변수, 함수, 클래스 이름이나 타입을 바꾸기가 어려워진다.

일곱째, 자신의 기억력을 자랑하지 마라
  - 독자가 코드를 읽으면서 변수 이름을 자신이 아는 이름을 변환해야 한다면 그 변수 이름은 바람직하지 못하다.
  - 문자 하나만 사용하는 변수는 루프에서 반복 횟수 변수로는 괜찮고 그 외에는 대부분 적절하지 못하다.
    단 루프 범위가 아주 작고 다름 이름과 충돌하지 않을 때만 괜찮다.
  - 전문가 프로그래머는 명료함이 최고라는 사실을 이해하고 자신의 능력을 좋은 방향으로 사용해 남들이 이해하는 코드를 내놓는다.
  - 클래스이름, 클래스 이름과 객체 이름은 명사나 명사구가 적합하고 동사는 사용하지 않는다.
    ex) Good - Customer, WikiPage, Account, AddressParser
         Bad - Manager, Processor, Data, info
  - 메서드 이름, 메서드 이름은 동사나 동사구가 적합하다.
    접근자, 변경자, 조건자는 javabean 표준에 따라 값 앞에 get,  set, is를 붙인다.
    ex) Good - postPayment, deletePage, save
    생성자를 중복정의 할 때는 정적 팩토리 메서드를 사용한다. (생성자를 사용할때보다 더 명시적이다.)
    ex) Charactor mage = Charactor.newMage(10,10,5,20) // HP, MP, STR, INT 
    
여덞째, 기발한 이름을 피하라
  - 이름이 너무 기발하면 저자와 유머 감각이 비슷한 사람만, 그리고 농담을 기억하는 동안만, 이름을 기억한다.
  - 의도를 분명하고 솔직하게 표현하라.

아홉쩨, 한 개념에 한 단어를 사용하라
  - 추상적인 개념 하나에 단어 하나를 선택해 이를 고수한다.

열번째, 말장난을 하지 마라
  - 한 단어를 두 가지 목적으로 사용하지 마라, 다른 개념에 같은 단어를 사용한다면 그것은 말장난에 불과하다.
  - 예를들어, 지금까지 구현한 add 메서드는 모두가 기존 값 두 개를 더하거나 이어서 새로운 값을 만든다고 가정하자.
    새로 작성한 메서드는 집합에 값 하나를 추가한다. 이 메서드는 기존 add 메서드와는 맥락이 다르다, 그러므로 다른 이름인 insert나 append를 사용한다.
  - 프로그래머는 코드를 최대한 이해하기 쉽게 짜야 한다. 집중적인 탐구가 필요한 코드가 아니라 대충 훑어봐도 이해할 코드 작성이 목표다.
  
열한번째, 해법 영역에서 가져온 이름을 사용하라.




    
    
    
    
